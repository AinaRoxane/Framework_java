I am trying to create a framework like spring for java. The structure of the project is the following:
framework_java
|_bin
|_src
    |_annotation: Controller.java , Get.java
    |_exception
    |_mg
        |_itu
        |_prom16: FrontController.java
    |_utils: Mapping.java, ModelView.java, PackageScanner.java
|_build.sh, README.md

Content:
Controller.java:
    package annotation;
    import java.lang.annotation.ElementType;
    import java.lang.annotation.Retention;
    import java.lang.annotation.RetentionPolicy;
    import java.lang.annotation.Target;


    @Retention(RetentionPolicy.RUNTIME)
    @Target(ElementType.TYPE)
    public @interface Controller {
        
    }
Get.java:
    package annotation;
    import java.lang.annotation.ElementType;
    import java.lang.annotation.Retention;
    import java.lang.annotation.RetentionPolicy;
    import java.lang.annotation.Target;


    @Retention(RetentionPolicy.RUNTIME)
    @Target(ElementType.METHOD)
    public @interface Get {
        String url();
    }

FrontController.java:
package mg.itu.prom16;
import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.lang.reflect.Method;
import java.util.HashMap;

import annotation.Controller;
import annotation.Get;
import exception.terminal.DuplicateGetMappingException;
import exception.web.ReturnTypeException;
import utils.Mapping;
import utils.ModelView;
import utils.PackageScanner;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.RequestDispatcher;

public class FrontController extends HttpServlet {
        PackageScanner scanner;
        HashMap<String , Mapping > ListService;

    @Override
    public void init() {
        try{
            scanner = new PackageScanner();
            // get parameter written in web.xml:
            String packagename = this.getInitParameter("package");
            // get all controller within packagename:
            ListService = scanner.getMapping(packagename, Controller.class);
        }catch(DuplicateGetMappingException e){
            System.out.println(e.getMessage());
        }
    }

    protected void processRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType("text/html;charset=UTF-8");
        PrintWriter out = response.getWriter();
            String url = scanner.conform_url(request.getRequestURL().toString());
             Mapping mapping = ListService.get(url);
                out.println(mapping.getClassName());
                out.println(mapping.getMethodName());
            /*try {
                Mapping mapping = ListService.get(url);
                out.println(mapping.getClassName());
                out.println(mapping.getMethodName());
                Class<?> clazz =  java.lang.Class.forName(mapping.getClassName());
                Object instance = clazz.getDeclaredConstructor().newInstance();
                Method method = clazz.getDeclaredMethod(mapping.getMethodName());
                Object result = method.invoke(instance);
                if(result instanceof String){
                    out.println(result);
                } else if( result instanceof ModelView){
                    ModelView mv = (ModelView) result;
                    request.setAttribute(mv.getVariableName(), mv.getData().get(mv.getVariableName()));
                    RequestDispatcher dispat = request.getRequestDispatcher(mv.getUrl());
                    dispat.forward(request,response);
                }*/
            /*} catch ( Exception e) {
                out.println("<h3>Oops!</h3>");
                System.out.println(e.getMessage());
            }*/
    }

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        processRequest(request, response);
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        processRequest(request, response);
    }
}

Mapping.java:
package utils;


public class Mapping {
        String className;
        String methodName;

        public Mapping(String my_class_name, String my_method_name){
            setClassName(my_class_name);
            setMethodName(my_method_name);
        }
        public String getClassName(){
            return className;
        }
        public void setClassName(String my_class_name){
            this.className = my_class_name;
        }
        public String getMethodName() {
            return methodName;
        }
        public void setMethodName(String methodName) {
            this.methodName = methodName;
        }
}

ModelView:
package utils;

import java.util.HashMap;
import java.util.Set;

public class  ModelView {
        String url;
        HashMap<String, Object> data; 
        
        public void addObject(String variableName, Object variablevalue){
            data = new HashMap<String , Object>();
            data.put(variableName, variablevalue);
        }
        public String getUrl() {
            return url;
        }

        public void setUrl(String url) {
            this.url = url;
        }

        public HashMap<String, Object> getData() {
            return data;
        }

        public void setData(HashMap<String, Object> data) {
            this.data = data;
        }

        public String getVariableName(){
            Set<String> keys = data.keySet();
            String key = keys.iterator().next();
            return key;
        }
}

PackageScanner.java:
package utils;
import java.io.File;
import annotation.Get;
import exception.terminal.DuplicateGetMappingException;

import java.lang.annotation.Annotation;
import java.lang.reflect.Method;
import java.util.HashMap;

public class PackageScanner {
        public String getAnnotatedClassWithin (String packagename,   Class<? extends Annotation> annotationClass){
            String ListService = "";
            
            packagename  = packagename .replace(".", "/");

            try {
                ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
                java.net.URL resource = classLoader.getResource(packagename );

                String filepath = resource.getFile().replace("%20"," ");
                File directory = new File(filepath);

                if(directory.isDirectory()){
                    packagename  = packagename .replace("/", ".");
                    
                    for (String filename: directory.list()){
                            filename = filename.substring(0, filename.length()- 6);
                            String className = packagename +"."+ filename;
                                Class<?> clazz = Class.forName(className);
                            if(clazz.isAnnotationPresent(annotationClass)){
                                ListService += className +",";
                            }
                    }
                }
            } catch (ClassNotFoundException e) {
                System.out.println(e.getMessage());                
            }
            return ListService;
        }

        public HashMap<String , Mapping>  getMapping(String packagename, Class<? extends Annotation> annotationClass) throws DuplicateGetMappingException {
            String[] ListController = getAnnotatedClassWithin(packagename, annotationClass).split(",");
            HashMap<String , Mapping> ListClasses = new HashMap<String , Mapping>();
            for (int i = 0; i < ListController.length ; i++) {
                try {
                    String className = ListController[i];
                    Class<?> clazz = Class.forName(className);
                        Method[] methods = clazz.getDeclaredMethods();
                        for (int j = 0; j < methods.length; j++) {
                            if(methods[j].isAnnotationPresent(Get.class)){
                                Mapping value = new Mapping(className, methods[j].getName());
                                String key = methods[j].getAnnotation(Get.class).url();
                                if(!wasUsed(key, ListClasses)){
                                    ListClasses.put(key,value);
                                } else{
                                    throw new DuplicateGetMappingException("The url : "+key+" from "+className+" method "+methods[j].getName()+" is already used by another class!");
                                }
                            }
                        }
                } catch (Exception e) {
                    
                }      
            }
            return ListClasses; 
        }

        public boolean wasUsed(String url, HashMap<String , Mapping> ListClasses){
            Mapping map = ListClasses.get(url);
            if(map.getClassName() != null){
                return true;
            }
            return false;
        }

        public String conform_url (String url){
            String newURL ="/";
            String[] path1 = url.split("//");
            String[] path = path1[1].split("/");
            for (int i = 2; i < path.length; i++) {
                newURL += path[i]+"/";
            }
            url = newURL.substring(0, newURL.length()-1);
            return url;
        }
}

build.sh:
#!/bin/bash

# Define variables
project_dir="/home/roxane/Documents/GitHub/Framework_java"
test_dir="/home/roxane/Documents/Naina/test"
web_dir="/opt/tomcat/apache-tomcat-10.1.23"

lib_dir="$web_dir/lib/servlet-api.jar"
src_dir="$project_dir/src"
bin_dir="$project_dir/bin"

# Find all .java files in the specified directories
java_files=$(find "$src_dir/hello" "$src_dir/annotation" "$src_dir/exception" "$src_dir/utils" "$src_dir/mg/itu/prom16" -name "*.java")

# Compile Java files
javac -cp "$bin_dir:$lib_dir" -d "$bin_dir" $java_files

# Create the jar file directly in the desired location
jar -cvf "$test_dir/lib/framework.jar" -C "$bin_dir" .
